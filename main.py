import telebot
import whisper
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat
import os
from telebot.types import Message
from docx import Document
import PyPDF2
from dotenv import load_dotenv
from telebot import types
import matplotlib.pyplot as plt

load_dotenv()

token  = os.getenv('TELEGRAM_TOKEN')

bot = telebot.TeleBot(token)

questions = ''
text = ''
text_from_audio = ''


model = GigaChat(
    credentials=os.getenv('CREDENTIALS'),
    scope=os.getenv('SCOPE'),
    model='GigaChat',
    verify_ssl_certs=False
)

model_whisper = whisper.load_model("base")


def pdf_to_text(pdf_path, output_txt):
    # Open the PDF file in read-binary mode
    text = ''
    with open(pdf_path, 'rb') as pdf_file:
        # Create a PdfReader object instead of PdfFileReader
        pdf_reader = PyPDF2.PdfReader(pdf_file)

        # Initialize an empty string to store the text

        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            text += page.extract_text()

    # Write the extracted text to a text file
    with open('output.txt', 'w', encoding='utf-8') as txt_file:
        txt_file.write(text)


def docx_to_txt(docx_path, txt_path):
    doc = Document(docx_path)
    text = "\n".join([para.text for para in doc.paragraphs])
    with open(txt_path, 'w', encoding='utf-8') as f:
        f.write(text)

bot.set_my_commands([
    types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    types.BotCommand("help", "–ü–æ–º–æ—â—å"),
    types.BotCommand("question", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
])

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /question —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º —Ç–µ–±—è —Ç–µ–º–∞–º")

@bot.message_handler(commands=['question'])
def send_welcome(message):
    bot.reply_to(message, "–°–∫–∏–Ω—å –ª–æ–Ω–≥—Ä–∏–¥ (pdf –∏–ª–∏ docx) –∏–ª–∏ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–π –ª–µ–∫—Ü–∏–∏ (mp3)")

@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.reply_to(message, "–≠—Ç–æ—Ç –±–æ—Ç –≤ —Ä–æ–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—á–µ–±–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É. –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start, –∞ –∑–∞—Ç–µ–º –≤—ã–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–π –ª–µ–∫—Ü–∏–∏.")

@bot.message_handler(content_types=['audio'])
def handle_audio(message):
    global text
    bot.reply_to(message, '–í–∏–∂—É —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–ª—É—á–∞—é —Ñ–∞–π–ª...')
    file_info = bot.get_file(message.audio.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    bot.reply_to(message, '–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª! –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...')

    audio_path = "audio_file.mp3"
    with open(audio_path, 'wb') as new_file:
        new_file.write(downloaded_file)

    print('–∑–∞–ø–∏—Å–∞–ª —Ñ–∞–π–ª')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Whisper
    result = model_whisper.transcribe(audio_path, language="ru")
    text = result["text"]



    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    print(text)
    os.remove(audio_path)

    bot.reply_to(message, '–û—Ç–ø—Ä–∞–≤—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')
    bot.register_next_step_handler(message, handle_questions)

@bot.message_handler(content_types=['document'])
def file(message):
    global text
    bot.reply_to(message,
                 '–í–∏–∂—É —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–ª—É—á–∞—é —Ñ–∞–π–ª...')
    try:
        file_info = bot.get_file(message.document.file_id)

        downloaded_file = bot.download_file(file_info.file_path)

        file_name = message.document.file_name
        save_path = os.path.join('C:\\Users\\User\\.cursor\\LCracker\\data', file_name)

        with open(save_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        bot.reply_to(message, '–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª! –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...')

        if message.document.mime_type == 'application/pdf':  # PDF
            pdf_to_text(file_name, 'output.txt')

        if message.document.mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':  # docx
            docx_to_txt(file_name, 'output.txt')

        os.remove(file_name)

        with open('output.txt', 'r', encoding='utf-8') as file:
            text = file.read()


        print(text)

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    bot.reply_to(message, '–û—Ç–ø—Ä–∞–≤—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')

    bot.register_next_step_handler(message, handle_questions)


def handle_questions(message: Message):
    global questions
    questions = message.text
    bot.send_message(message.chat.id, f'–¢–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: {questions}. –°–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–∞–º–∏...')
    
    task = f"""–°–µ–π—á–∞—Å —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ç–µ–∫—Å—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–µ–±–µ –∑–∞–¥–∞–º. 
    –í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ñ–æ—Ä–º—É–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ LaTeX, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–æ–≤–∞ FORMULA:
    –ü–æ–ª—å–∑—É–π—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Ç–æ–ª—å–∫–æ –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è. 
    \n {text} \n –û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: {questions}"""
    
    messages = [HumanMessage(content=task)]
    response = model.invoke(messages)
    
    print(f"–û—Ç–≤–µ—Ç –æ—Ç GigaChat: {response.content}")
    
    lines = response.content.split('\n')
    formula_found = False
    current_description = ""
    
    for i, line in enumerate(lines):
        clean_line = line.strip()
        
        if clean_line.startswith('FORMULA:'):
            formula_found = True
            formula_lines = []
            j = i + 1
            while j < len(lines) and not lines[j].strip().startswith('FORMULA:'):
                if lines[j].strip():
                    formula_lines.append(lines[j].strip())
                j += 1
            
            formula = ' '.join(formula_lines).strip('$')
            
            if formula:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É–ª—É
                if j < len(lines) and not lines[j].strip().startswith('FORMULA:'):
                    current_description = lines[j].strip()
                
                try:
                    if current_description:
                        bot.send_message(message.chat.id, current_description)
                    
                    plt.figure(facecolor='black')
                    plt.text(0.5, 0.5, f'${formula}$', color='white', fontsize=50, ha='center', va='center')
                    plt.axis('off')
                    plt.savefig('formula.png', bbox_inches='tight', pad_inches=0.1, facecolor='black')
                    
                    with open('formula.png', 'rb') as photo:
                        bot.send_photo(chat_id=message.chat.id, photo=photo)
                    
                    os.remove('formula.png')
                except Exception as e:
                    bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã: {str(e)}")
                finally:
                    plt.close()
            
            current_description = ""
    
    if not formula_found:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ")
    
    bot.send_message(message.chat.id, "–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É")
    bot.register_next_step_handler(message, handle_questions)



bot.infinity_polling()